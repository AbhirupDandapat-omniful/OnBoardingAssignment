openapi: 3.0.3
info:
  title: GoCommons OMS & IMS APIs
  version: 1.0.0
  description: |
    This document describes the public HTTP endpoints for the OMS (Order Management Service)
    and the IMS (Inventory Management Service).

servers:
  - url: http://localhost:8080
    description: OMS server
  - url: http://localhost:8081
    description: IMS server

paths:
  ## OMS Endpoints

  /auth/token:
    post:
      summary: Issue a JWT for API authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /orders/upload:
    post:
      summary: Upload a CSV of orders
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Accepted; enqueued for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  bucket:
                    type: string
                  key:
                    type: string

  /orders/bulk:
    post:
      summary: Trigger a bulk SQS event for a previously uploaded CSV
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkOrderRequest'
      responses:
        '202':
          description: Accepted

  /orders:
    get:
      summary: List orders with optional filters
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
        - in: query
          name: seller_id
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum: [on_hold, new_order]
        - in: query
          name: from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      summary: Create a single order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: string

  /orders/errors/{file}:
    get:
      summary: Download invalid-rows CSV from S3
      parameters:
        - in: path
          name: file
          required: true
          schema:
            type: string
      responses:
        '200':
          description: CSV file download
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '404':
          description: Not found

  /webhooks:
    post:
      summary: Register a new webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
    get:
      summary: List all webhooks
      responses:
        '200':
          description: A list of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'

  /webhooks/{id}:
    get:
      summary: Get a single webhook by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '404':
          description: Not found
    put:
      summary: Update an existing webhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
    delete:
      summary: Delete (deactivate) a webhook
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /webhook-logs:
    get:
      summary: List recent webhook delivery logs
      responses:
        '200':
          description: A list of webhook log entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookLog'

  ## IMS Endpoints

  /tenants:
    post:
      summary: Create a tenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRequest'
      responses:
        '201':
          description: Created tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'

  /tenants/{id}:
    get:
      summary: Get a tenant by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        '404':
          description: Not found

  /sellers:
    post:
      summary: Create a seller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SellerRequest'
      responses:
        '201':
          description: Created seller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'

  /sellers/{id}:
    get:
      summary: Get a seller by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The seller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
        '404':
          description: Not found

  /categories:
    post:
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      summary: Get a category by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Not found

  /hubs:
    get:
      summary: List hubs with optional filters
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
        - in: query
          name: seller_id
          schema:
            type: string
      responses:
        '200':
          description: A list of hubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hub'
    post:
      summary: Create a hub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubRequest'
      responses:
        '201':
          description: Created hub
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'

  /hubs/{id}:
    get:
      summary: Get a hub by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The hub
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
        '404':
          description: Not found
    put:
      summary: Update a hub by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubRequest'
      responses:
        '200':
          description: Updated hub
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hub'
    delete:
      summary: Delete a hub by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /skus:
    get:
      summary: List SKUs, optional tenant/seller/code filters
      parameters:
        - in: query
          name: tenant_id
          schema:
            type: string
        - in: query
          name: seller_id
          schema:
            type: string
        - in: query
          name: sku_codes
          schema:
            type: string
            description: comma-separated list
      responses:
        '200':
          description: List of SKUs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SKU'
    post:
      summary: Create a SKU
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SKURequest'
      responses:
        '201':
          description: Created SKU
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU'

  /skus/{id}:
    get:
      summary: Get a SKU by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The SKU
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU'
        '404':
          description: Not found
    put:
      summary: Update a SKU by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SKURequest'
      responses:
        '200':
          description: Updated SKU
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU'
    delete:
      summary: Delete a SKU by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted

  /inventory:
    get:
      summary: Get inventory for one or more SKUs in a hub
      parameters:
        - in: query
          name: hub_id
          required: true
          schema:
            type: string
        - in: query
          name: sku_ids
          required: true
          schema:
            type: string
            description: comma-separated list of SKU IDs
      responses:
        '200':
          description: List of inventory records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
    put:
      summary: Upsert inventory for a SKU in a hub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryUpdateRequest'
      responses:
        '200':
          description: Updated inventory record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        seller_id:
          type: string
        hub_id:
          type: string
        sku_id:
          type: string
        quantity:
          type: integer
          format: int64
        status:
          type: string
          enum: [on_hold, new_order]
        created_at:
          type: string
          format: date-time

    CreateOrderRequest:
      type: object
      required: [tenant_id, seller_id, hub_id, sku_id, quantity]
      properties:
        tenant_id:
          type: string
        seller_id:
          type: string
        hub_id:
          type: string
        sku_id:
          type: string
        quantity:
          type: integer
          format: int64

    BulkOrderRequest:
      type: object
      required: [bucket, key]
      properties:
        bucket:
          type: string
        key:
          type: string

    Webhook:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        callback_url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [order.created, order.updated]
        headers:
          type: object
          additionalProperties:
            type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    WebhookRequest:
      type: object
      required: [tenant_id, callback_url, events]
      properties:
        tenant_id:
          type: string
        callback_url:
          type: string
          format: uri
        events:
          type: array
          items:
            type: string
            enum: [order.created, order.updated]
        headers:
          type: object
          additionalProperties:
            type: string
        is_active:
          type: boolean

    WebhookLog:
      type: object
      properties:
        id:
          type: string
        webhook_id:
          type: string
        event:
          type: string
        payload:
          type: object
        created_at:
          type: string
          format: date-time

    Tenant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TenantRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Seller:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SellerRequest:
      type: object
      required: [tenant_id, name]
      properties:
        tenant_id:
          type: string
        name:
          type: string
        metadata:
          type: object
          additionalProperties: true

    Category:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CategoryRequest:
      type: object
      required: [tenant_id, name]
      properties:
        tenant_id:
          type: string
        name:
          type: string
        description:
          type: string

    Hub:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        location:
          type: string
        address:
          type: string
        contact_email:
          type: string
        contact_phone:
          type: string
        timezone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    HubRequest:
      type: object
      required: [tenant_id, seller_id, name]
      properties:
        tenant_id:
          type: string
        seller_id:
          type: string
        name:
          type: string
        location:
          type: string
        address:
          type: string
        contact_email:
          type: string
        contact_phone:
          type: string
        timezone:
          type: string

    SKU:
      type: object
      properties:
        id:
          type: string
        tenant_id:
          type: string
        seller_id:
          type: string
        code:
          type: string
        name:
          type: string
        description:
          type: string
        category_id:
          type: string
        weight:
          type: number
        weight_unit:
          type: string
        length:
          type: number
        width:
          type: number
        height:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SKURequest:
      type: object
      required: [tenant_id, seller_id, code, name]
      properties:
        tenant_id:
          type: string
        seller_id:
          type: string
        code:
          type: string
        name:
          type: string
        description:
          type: string
        category_id:
          type: string
        weight:
          type: number
        weight_unit:
          type: string
        length:
          type: number
        width:
          type: number
        height:
          type: number

    Inventory:
      type: object
      properties:
        hub_id:
          type: string
        sku_id:
          type: string
        quantity_on_hand:
          type: integer
        quantity_reserved:
          type: integer
        min_threshold:
          type: integer
        max_threshold:
          type: integer
        updated_at:
          type: string
          format: date-time

    InventoryUpdateRequest:
      type: object
      required: [hub_id, sku_id, quantity]
      properties:
        hub_id:
          type: string
        sku_id:
          type: string
        quantity:
          type: integer
